{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { ViewChild } from '@angular/core';\nimport { BaseChartDirective } from 'ng2-charts';\nimport DataLabelsPlugin from 'chartjs-plugin-datalabels';\nlet DashboardProductoComponent = class DashboardProductoComponent {\n  constructor(graficoService) {\n    this.graficoService = graficoService;\n    this.listaAlmacen = {};\n    this.almacenResponse = {};\n    this.productosEntrada = 0;\n    this.productosSalida = 0;\n    this.productoNombre = '';\n    this.barChartOptions = {\n      responsive: true,\n      // We use these empty structures as placeholders for dynamic theming.\n      scales: {\n        x: {},\n        y: {\n          min: 5\n        }\n      },\n      plugins: {\n        legend: {\n          display: true //Esto muestra las leyendas\n        },\n\n        datalabels: {\n          anchor: 'end',\n          align: 'end'\n        }\n      }\n    };\n    this.barChartType = 'bar';\n    this.barChartPlugins = [DataLabelsPlugin];\n    this.barChartData = {\n      labels: ['Entrada', 'Salida'],\n      datasets: [{\n        data: [this.productosEntrada, this.productosSalida],\n        label: this.productoNombre,\n        backgroundColor: ['rgba(255, 0, 0, 0.5)', 'rgba(0, 0, 255, 0.5)']\n      }]\n    };\n  }\n  listar() {\n    const fd = new FormData();\n    const requestGrafico = {};\n    requestGrafico.CodigoProducto = '2';\n    requestGrafico.CodigoAlmacen = '1';\n    requestGrafico.CodigoProductoLote = '';\n    requestGrafico.CodigoLote = '0';\n    requestGrafico.Descripcion = '';\n    requestGrafico.Estado = '';\n    requestGrafico.CodigoEmpresa = '00000001';\n    this.graficoService.listar(requestGrafico).subscribe(response => {\n      this.almacenResponse = response;\n      this.productosEntrada = this.almacenResponse.datos.result[0].stock;\n      this.productoNombre = this.almacenResponse.datos.result[0].descripcion;\n      let tamano = this.almacenResponse.datos.result.length;\n      console.log(tamano);\n      if (tamano < 2) {\n        this.productosSalida = 0;\n      } else {\n        this.productosSalida = this.almacenResponse.datos.result[1].stock * -1;\n      }\n      // Actualiza los datos del grafico\n      this.barChartData.datasets[0].data = [this.productosEntrada, this.productosSalida];\n      if (this.chart !== undefined) {\n        this.chart.chart.update();\n      }\n    });\n  }\n  // events\n  chartClicked({\n    event,\n    active\n  }) {\n    console.log(event, active);\n  }\n  chartHovered({\n    event,\n    active\n  }) {\n    console.log(event, active);\n  }\n};\n__decorate([ViewChild(BaseChartDirective)], DashboardProductoComponent.prototype, \"chart\", void 0);\nDashboardProductoComponent = __decorate([Component({\n  selector: 'app-dashboard-producto',\n  templateUrl: './dashboard-producto.component.html',\n  styleUrls: ['./dashboard-producto.component.css']\n})], DashboardProductoComponent);\nexport { DashboardProductoComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}