{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { DialogoConfirmacionComponent } from '../dialogoconfirmacion/dialogoconfirmacion.component';\nlet FindestacionComponent = class FindestacionComponent {\n  constructor(router, dialogo, util, notifier) {\n    this.router = router;\n    this.dialogo = dialogo;\n    this.util = util;\n    this.notifier = notifier;\n    this.qrData = null;\n    this.scannedCode = null;\n    this.hasCameras = false;\n    this.statusButton = \"false\";\n    this.listaApertura = [];\n    this.listKeyPadButtons = [{\n      icon: 'description',\n      color: 'warn',\n      action: 'nuevo',\n      tooltip: 'Crear Nuevo Registro',\n      texto: \"Nuevo\",\n      estado: \"false\"\n    }, {\n      icon: 'add',\n      color: 'warn',\n      action: 'insert',\n      tooltip: 'Agregar Datos',\n      texto: \"Agregar\",\n      estado: \"group.invalid\"\n    }, {\n      icon: 'sensor_door',\n      color: 'warn',\n      action: 'salir',\n      tooltip: 'Salir De la Pantalla',\n      texto: \"Salir\",\n      estado: \"false\"\n    }];\n    this.metadataTable = [{\n      field: \"codigoEstacion\",\n      title: \"Cod. Estacion\"\n    },\n    //{field:\"codigoCompañia\", title: \"Codigo\"},\n    {\n      field: \"nombreEstacion\",\n      title: \"Estacion\"\n    },\n    // {field:\"codigoEmpleado\", title: \"Codigo\"},\n    {\n      field: \"unidadMedida\",\n      title: \"Unidad Medida\"\n    },\n    //{field:\"codigoEstacion\", title: \"Codigo\"},\n    {\n      field: \"productividad1\",\n      title: \"Productividad 1\"\n    }, {\n      field: \"productividad2\",\n      title: \"Productividad 2\"\n    }, {\n      field: \"productividad3\",\n      title: \"Productividad 3\"\n    }, {\n      field: \"tiempoPreparacion\",\n      title: \"Tiempo Preparacion\"\n    }, {\n      field: \"cantidadPersonas\",\n      title: \"Cantidad Personas\"\n    }];\n    this.displayedColumns = ['position', 'name', 'weight', 'symbol'];\n  }\n  ngOnChanges(changes) {\n    // if (changes.firstChange){\n    console.log(changes);\n    //this.dataTable = this.listParte; // comentado para probar el insert\n    //this.dataTable  = changes[\"listParte\"].currentValue;\n    // this.dataTable = changes.listParte.currentValue;\n    //this.dataTable =  changes.listParterespuesta.currentValue;\n    //this.dataTable = this.listParterespuesta.datos.result;\n    // }\n  }\n\n  ngOnInit() {\n    this.initializeForm();\n    this.path = \"/gestionpartes\";\n    //this.dataTable = this.listParterespuesta;\n    this.cantidadApoyo = 0;\n    this.codigoEmpleado = 0;\n    //this.dataTable =  this.listParterespuesta.datos.result;\n  }\n\n  execute(action) {}\n  Salir(path) {\n    this.router.navigate([this.path]);\n  }\n  //RequestEmpleado : AperturaParteEmpleado;\n  listarEmpleado(codigoEmpleado) {}\n  listarEstacion(codigoEstacion) {}\n  listar(codigoparte) {\n    /*\r\n       \r\n        this.dataTable = [];\r\n         \r\n          const fd= new FormData();\r\n          const values = this.group.value\r\n          const parte: RequestCapacidadMaquina =  this.group.value;\r\n          this.codigoEstacion= values['CodigoEstacion']\r\n          parte.CodigoEstacion = this.codigoEstacion;\r\n          parte.CodigoCompañia=\"02100000\"\r\n         this.CapacidadMaquinaService.listar(parte).subscribe(response =>\r\n          {\r\n            this.listCMrespuesta = response\r\n            this.dataTable = this.listCMrespuesta.datos.result;\r\n          }, (errorServicio)=>{\r\n              this.util.showMessage( errorServicio.error.meta.mensaje);\r\n              this.dataTable = [];\r\n           });\r\n    \r\n    \r\n           */\n  }\n  delete() {\n    const response = this.util.confirm(\"Estas seguro de Eliminar\");\n    response.subscribe(response => console.log(\"response\", response));\n  }\n  /*edit (row : CapacidadMaquinaEntity){\r\n  \n      this.onEdit.emit(row)\r\n      this.openModal(row)\r\n  \n  }*/\n  nuevo() {\n    // this.initializeForm();\n    //this.listaApertura=[]\n    // this.dataTable = this.listaApertura;\n    this.openModal({\n      name: 'Marcela'\n    });\n  }\n  cargarDatos() {\n    this.group = new FormGroup({\n      codigoEmpleado: new FormControl(this.listaApertura[0].codigoEmpleado, Validators.required),\n      codigoEstacion: new FormControl(this.listaApertura[0].codigoEstacion, Validators.required),\n      codigoOrdenTrabajo: new FormControl(this.listaApertura[0].codigoOrdenTrabajo, Validators.required)\n    });\n  }\n  exportar() {\n    this.OpenSheet();\n  }\n  OpenSheet() {\n    this.util.openSheet();\n  }\n  initializeForm() {\n    this.group = new FormGroup({\n      codigoEstacion: new FormControl(null),\n      descripcion: new FormControl(null)\n    });\n  }\n  openModal(record = null) {\n    /*const options = {\r\n         \r\n      disableClose: true,\r\n      panelClass:'container-form',\r\n      data: record,\r\n    };\r\n            const reference =  this.util.openModal(\r\n      FormcapacidadmaquinaComponent,\r\n      options\r\n       \r\n      );\r\n      reference.subscribe((respuesta) => {\r\n        if (respuesta){\r\n         \r\n         if (!respuesta.codigoCapacidadMaquina){\r\n              this.CapacidadMaquinaService.insert(respuesta).subscribe(response =>\r\n                {\r\n                  //this.listCMInsertrespuesta = response\r\n                  //this.dataTable = this.listCMrespuesta.datos.result;\r\n                }, (errorServicio)=>{\r\n                    this.util.showMessage( errorServicio.error.meta.mensaje);\r\n                    this.dataTable = [];\r\n                });\r\n           }else {\r\n            \r\n            this.CapacidadMaquinaService.update(respuesta,respuesta.codigoCapacidadMaquina).subscribe(response =>\r\n              {\r\n                //this.listCMInsertrespuesta = response\r\n                //this.dataTable = this.listCMrespuesta.datos.result;\r\n              }, (errorServicio)=>{\r\n                  this.util.showMessage( errorServicio.error.meta.mensaje);\r\n                  this.dataTable = [];\r\n              });\r\n                   }\r\n                }\r\n              });\r\n              */\n  }\n  scanCode() {\n    // this.barcodeScanner.scan().then(barcodeData => {\n    //  this.scannedCode = barcodeData.text;\n    //})\n    this.dialogo.open(DialogoConfirmacionComponent, {\n      data: `¿Desea Agregar personal de Apoyo?`\n    }).afterClosed().subscribe(confirmado => {\n      if (confirmado) {\n        alert(\"¡A mí también!\");\n        //this.edit();\n      } else {\n        alert(\"Deberías probarlo, a mí me gusta :)\");\n      }\n    });\n    //alert(\"camara\");\n  }\n};\n\nFindestacionComponent = __decorate([Component({\n  selector: 'app-findestacion',\n  templateUrl: './findestacion.component.html',\n  styleUrls: ['./findestacion.component.css']\n})], FindestacionComponent);\nexport { FindestacionComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}