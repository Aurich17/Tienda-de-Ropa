{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { EventEmitter, Input, Output, ViewChild } from '@angular/core';\nimport { Component } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { VERSION } from '@angular/platform-browser';\nimport { DialogoConfirmacionComponent } from 'src/app/shared/components/dialogoconfirmacion/dialogoconfirmacion.component';\nimport { FormAperturaparteComponent } from '../form-aperturaparte/form-aperturaparte.component';\nimport { MatSelect } from '@angular/material/select';\nlet AperturaparteComponent = class AperturaparteComponent {\n  constructor(\n  //private barcodeScanner: BarcodeScanner,\n  router, dialogo, util, notifier, aperturaService, miDatePipe, storage) {\n    this.router = router;\n    this.dialogo = dialogo;\n    this.util = util;\n    this.notifier = notifier;\n    this.aperturaService = aperturaService;\n    this.miDatePipe = miDatePipe;\n    this.storage = storage;\n    this.outputParte = new EventEmitter();\n    this.qrData = null;\n    this.scannedCode = null;\n    this.ngVersion = VERSION.full;\n    // scanner: ZXingScannerComponent;\n    this.hasCameras = false;\n    this.statusButton = \"false\";\n    this.turno = [{\n      value: '1',\n      viewValue: '1'\n    }, {\n      value: '2',\n      viewValue: '2'\n    }, {\n      value: '3',\n      viewValue: '3'\n    }];\n    this.motivo = [{\n      value: '1',\n      viewValue: 'motivo 1'\n    }, {\n      value: '2',\n      viewValue: 'motivo 2 '\n    }, {\n      value: '3',\n      viewValue: 'motivo 3'\n    }];\n    /*formatearFecha(fecha: string) {\r\n      const fechaArray: any[] = fecha.split(/[\\/\\s\\:]/g);\r\n              // Pasamos fecha a milisegundos\r\n      const milliseconds = Date.UTC(fechaArray[2], fechaArray[1] - 1,\r\n        fechaArray[0], fechaArray[3], fechaArray[4], fechaArray[5]);\r\n              const fechaFormateada = this.miDatePipe.transform(milliseconds, 'yyyy-MM-dd hh:mm:ss');\r\n              return `${fechaFormateada} ${fecha.split(/[\\s]/g)[1]}-00`;\r\n    }\r\n            */\n    this.listaApertura = [];\n    this.listKeyPadButtons = [{\n      icon: 'description',\n      color: 'warn',\n      action: 'nuevo',\n      tooltip: 'Crear Nuevo Registro',\n      texto: \"Nuevo\",\n      estado: \"false\"\n    }, {\n      icon: 'add',\n      color: 'warn',\n      action: 'insert',\n      tooltip: 'Agregar Datos',\n      texto: \"Agregar\",\n      estado: \"group.invalid\"\n    }, {\n      icon: 'sensor_door',\n      color: 'warn',\n      action: 'salir',\n      tooltip: 'Salir De la Pantalla',\n      texto: \"Salir\",\n      estado: \"false\"\n    }];\n    this.metadataTable = [{\n      field: \"codigoParte\",\n      title: \"Parte\"\n    },\n    //{field:\"codigoCompañia\", title: \"Codigo\"},\n    // {field:\"nombreCompañia\", title: \"Compañia\"},\n    // {field:\"codigoEmpleado\", title: \"Codigo\"},\n    {\n      field: \"nombreEmpleado\",\n      title: \"Empleado\"\n    },\n    //{field:\"codigoEstacion\", title: \"Codigo\"},\n    {\n      field: \"nombreEstacion\",\n      title: \"Estacion\"\n    }, {\n      field: \"codigoOrdenTrabajo\",\n      title: \"Orden Trabajo\"\n    }, {\n      field: \"numeroParteProduccion\",\n      title: \"Parte Prod.\"\n    }, {\n      field: \"secuencia\",\n      title: \"Secuencia\"\n    }, {\n      field: \"cantidadApoyo\",\n      title: \"Cant. Apoyo\"\n    }];\n  }\n  ngOnChanges(changes) {\n    // if (changes.firstChange){\n    console.log(changes);\n    //this.dataTable = this.listParte; // comentado para probar el insert\n    //this.dataTable  = changes[\"listParte\"].currentValue;\n    // this.dataTable = changes.listParte.currentValue;\n    //this.dataTable =  changes.listParterespuesta.currentValue;\n    //this.dataTable = this.listParterespuesta.datos.result;\n    // }\n  }\n\n  showSearch() {\n    // this.show = !this.show;  \n    setTimeout(() => {\n      this.searchElement.nativeElement.focus();\n    }, 0);\n  }\n  cambiarfocus(tipo) {\n    /*\r\n        if (tipo===\"empleado\"){\r\n         const pasarsize =  this.validarcodigoempleado(this.group.controls['codigoEmpleado'].value)\r\n          if  ((this.group.controls['codigoEmpleado'].value.length>4) || (pasarsize ===true)){\r\n            if  (this.listarEmpleado(\"1\") ===true){\r\n              setTimeout(()=>{ // this will make the execution after the above boolean has changed\r\n                this.estacion.nativeElement.focus();\r\n                },0);\r\n            }\r\n          \r\n        }\r\n       }else if (tipo===\"estacion\"){\r\n        if  (this.group.controls['codigoEstacion'].value.length>5){\r\n          this.listarEstacion(\"\")\r\n        }\r\n    \r\n       }else if (tipo===\"ot\"){\r\n    \r\n        if  (this.group.controls['codigoOrdenTrabajo'].value.length>6){\r\n          this.listarOT()\r\n    \r\n        }\r\n    \r\n       }\r\n    \r\n       */\n  }\n  handleKeyDown(event, tipo) {\n    if (event.keyCode == 13) {\n      if (tipo === \"empleado\") {\n        this.listarEmpleado(\"1\");\n      } else if (tipo === \"estacion\") {\n        this.listarEstacion(\"\");\n      } else if (tipo === \"ot\") {\n        this.listarOT();\n      } else if (tipo === \"secuencia\") {\n        setTimeout(() => {\n          this.turnos.focus();\n        }, 0);\n      } else if (tipo === \"guardar\") {\n        setTimeout(() => {\n          this.guardar.nativeElement.focus();\n        }, 0);\n      }\n    } else if (event.keyCode == 40) {\n      // action\n    } else if (event.keyCode == 38) {\n      // action\n    }\n  }\n  ngOnInit() {\n    this.initializeForm();\n    this.path = \"/gestionpartes\";\n    //this.dataTable = this.listParterespuesta;\n    this.cantidadApoyo = 0;\n    this.codigoEmpleado = 0;\n    this.Accion = \"nuevo\";\n    this.tituloboton = \"Guardar\";\n    this.codigoEstacion = '';\n    this.checkstatus = false;\n    this.listaEmpleado = [];\n    this.checked = false;\n    this.showSearch();\n    this.habilitar = \"disabled\";\n    this.isEnvioSolicitud = false;\n    //this.habilitarbotonguardar=\"disabled\"\n    this.ispasarstockfaltante = false;\n    const codigorol = this.storage.get(\"rol\").toString();\n    //if (this.validarroles(codigorol)){\n    if (1 == 1) {\n      this.ispasarstockfaltante = true;\n    }\n    /*\r\n       let cardNum = this.group.get('codigoEmpleado').value;\r\n       //if (cardNum == null || cardNum == '') {\r\n         (<any>this.group.get('codigoEmpleado')).nativeElement.focus();\r\n       //}\r\n    */\n    //this.dataTable =  this.listParterespuesta.datos.result;\n  }\n\n  validarcodigoempleado(dato) {\n    var myArr = [\"5\", \"6\", \"12\", \"13\", \"17\", \"23\", \"24\", \"29\", \"31\", \"32\", \"33\", \"35\", \"49\", \"54\", \"55\", \"64\", \"67\", \"68\", \"76\", \"82\", \"86\", \"89\", \"91\", \"176\", \"257\", \"299\", \"303\", \"305\", \"384\", \"5174\", \"5192\"];\n    const resultado = myArr.includes(dato);\n    return resultado;\n  }\n  validarroles(dato) {\n    var myArr = [\"1\", \"2\", \"3\", \"5\"];\n    const resultado = myArr.includes(dato);\n    return resultado;\n  }\n  execute(action) {\n    if (action == \"insert\") {\n      console.log(action);\n      this.insert();\n    } else {\n      console.log(action);\n      this.exportar();\n    }\n  }\n  Salir(path) {\n    this.router.navigate([this.path]);\n  }\n  limpiartexto(control) {\n    if (control === 'Empleado') {\n      this.group.controls['codigoEmpleado'].setValue('');\n      this.codigoEmpleado = 0;\n      this.habilitar = \"disabled\";\n    } else if (control === 'Estacion') {\n      this.group.controls['codigoEstacion'].setValue('');\n      this.codigoEstacion = '';\n    } else if (control === \"OT\") {\n      this.group.controls['codigoOrdenTrabajo'].setValue('');\n    }\n  }\n  listarOT() {\n    const RequestOT = {};\n    const values = this.group.value;\n    RequestOT.CodigoCompañia = '02100000';\n    RequestOT.CodigoOrdenTrabajo = values[\"codigoOrdenTrabajo\"];\n    if (this.group.controls['codigoOrdenTrabajo'].valid) {\n      this.aperturaService.listarot(RequestOT).subscribe(response => {\n        this.listOTResponse = response;\n        //this.codigoEmpleado= this.listEmpleadoResponse.datos.result[0].codigoEmpleado; \n        //this.group.controls['codigoEmpleado'].setValue(this.listEmpleadoResponse.datos.result[0].codigoEmpleado && ' - ' && this.listEmpleadoResponse.datos.result[0].nombreCompleto );\n        setTimeout(() => {\n          this.secuencia.nativeElement.focus();\n        }, 0);\n        if (this.listEmpleadoResponse.datos.status != 200) {\n          this.util.showMessage(this.listEmpleadoResponse.meta.mensaje);\n        } else {\n          if (this.listOTResponse.datos.TotalRegistro <= 0) {\n            this.group.controls['codigoOrdenTrabajo'].setValue(\"\");\n            this.util.showMessage(this.listEmpleadoResponse.meta.mensaje);\n          }\n        }\n      }, errorServicio => {\n        this.util.showMessage(errorServicio.error.meta.mensaje);\n        this.group.controls['codigoOrdenTrabajo'].setValue(\"\");\n        //this.dataTable = [];\n      });\n    }\n  }\n\n  AsignarReproceso() {\n    const values = this.group.value;\n    //if  (this.codigoEstacion === ''){\n    //alert(values[\"reproceso\"])\n    //}\n    if (values[\"reproceso\"] === false) {\n      this.group.controls['secuencia'].setValue(\"99\");\n    } else if (values[\"reproceso\"] === null) {\n      this.group.controls['secuencia'].setValue(\"99\");\n    } else {\n      this.group.controls['secuencia'].setValue(\"\");\n    }\n  }\n  listarEmpleado(codigoEmpleado) {\n    this.isvalido = false;\n    const RequestEmpleado = {};\n    const values = this.group.value;\n    RequestEmpleado.codigoCompañia = '02100000';\n    RequestEmpleado.codigoEmpleado = values[\"codigoEmpleado\"];\n    if (this.group.controls['codigoEmpleado'].valid) {\n      this.aperturaService.listarempleado(RequestEmpleado).subscribe(response => {\n        this.listEmpleadoResponse = response;\n        this.codigoEmpleado = this.listEmpleadoResponse.datos.result[0].codigoEmpleado;\n        this.group.controls['codigoEmpleado'].setValue(this.listEmpleadoResponse.datos.result[0].codigoEmpleado && ' - ' && this.listEmpleadoResponse.datos.result[0].nombreCompleto);\n        this.isvalido = true;\n        setTimeout(() => {\n          this.estacion.nativeElement.focus();\n        }, 0);\n        this.habilitar = \"null\";\n        return this.isvalido;\n        if (this.listEmpleadoResponse.datos.status != 200) {\n          this.util.showMessage(this.listEmpleadoResponse.meta.mensaje);\n        } else {\n          /*\r\n          this.dialogo\r\n          .open(DialogoConfirmacionComponent, {\r\n            data: `¿Desea agregar personal de Apoyo?`\r\n          })\r\n          .afterClosed()\r\n          .subscribe((confirmado: Boolean) => {\r\n            if (confirmado) {\r\n              //alert(\"¡A mí también!\");\r\n              this.edit();\r\n              \r\n            } else {\r\n             // alert(\"Deberías probarlo, a mí me gusta :)\");\r\n            }\r\n          });\r\n          */\n        }\n      }, errorServicio => {\n        this.util.showMessage(errorServicio.error.meta.mensaje);\n        this.group.controls['codigoEmpleado'].setValue(\"\");\n        //this.dataTable = [];\n      });\n    }\n\n    return this.isvalido;\n  }\n  personalapoyo() {\n    /* this.dialogo\r\n     .open(DialogoConfirmacionComponent, {\r\n       data: `¿Desea agregar personal de Apoyo?`\r\n     })\r\n     .afterClosed()\r\n     .subscribe((confirmado: Boolean) => {\r\n       if (confirmado) {\r\n         //alert(\"¡A mí también!\");\r\n         this.edit();\r\n         \r\n       } else {\r\n        // alert(\"Deberías probarlo, a mí me gusta :)\");\r\n       }\r\n     });\r\n    */\n    this.edit();\n  }\n  listarEstacion(codigoEstacion) {\n    const RequestEstacion = {};\n    ;\n    const values = this.group.value;\n    if (this.codigoEstacion === '') {\n      RequestEstacion.CodigoEstacion = values[\"codigoEstacion\"];\n    } else {\n      RequestEstacion.CodigoEstacion = this.codigoEstacion;\n    }\n    if (this.group.controls['codigoEstacion'].valid) {\n      this.aperturaService.listarestacion(RequestEstacion).subscribe(response => {\n        this.listEstacionResponse = response;\n        this.codigoEstacion = this.listEstacionResponse.datos.result[0].codigoEstacion;\n        this.group.controls['codigoEstacion'].setValue(this.listEstacionResponse.datos.result[0].codigoEstacion && ' - ' && this.listEstacionResponse.datos.result[0].descripcion);\n        setTimeout(() => {\n          this.ot.nativeElement.focus();\n        }, 0);\n        if (this.listEstacionResponse.datos.status != 200) {\n          this.util.showMessage(this.listEstacionResponse.meta.mensaje);\n        }\n      }, errorServicio => {\n        this.util.showMessage(errorServicio.error.meta.mensaje);\n        this.group.controls['codigoEstacion'].setValue(\"\");\n        //this.dataTable = [];\n      });\n      //const fd= new FormData();\n    }\n  }\n\n  listar(codigoparte) {\n    if (this.group.valid) {\n      const fd = new FormData();\n      const values = this.group.value;\n      const parte = {}; //  this.group.value;\n      parte.CodigoParte = codigoparte;\n      parte.CodigoEmpleado = null;\n      // parte.CodigoEstacion= null\n      // parte.CodigoOrdenTrabajo = null \n      /*this.aperturaService.listar(parte).subscribe(response =>\r\n                  {\r\n         this.listParterespuesta = response\r\n         this.dataTable = this.listParterespuesta.datos.result;\r\n       }\r\n         )\r\n       */\n      this.aperturaService.listarParteActividad(parte).subscribe(response => {\n        this.listParteAxtividad = response;\n        this.dataTable = this.listParteAxtividad.datos.result;\n      });\n    }\n  }\n  insertnew() {\n    const values = this.group.value;\n    this.MensajeValidarParte = \"\";\n    const partevalidar = {};\n    partevalidar.CodigoCompañia = \"02100000\";\n    partevalidar.CodigoOrdenTrabajo = values[\"codigoOrdenTrabajo\"];\n    partevalidar.Secuencia = values[\"secuencia\"];\n    this.aperturaService.ValidarParte(partevalidar).subscribe(response => {\n      this.RespuestaValidarParte = response;\n      // this.util.showMessage(this.listInsertParterespuesta.meta.mensaje);\n      // this.isEnvioSolicitud = false\n      this.MensajeValidarParte = this.RespuestaValidarParte.meta.mensaje;\n      if (this.RespuestaValidarParte.meta.mensaje != \"OK\") {}\n      if (this.RespuestaValidarParte.datos.status === 200) {\n        this.MensajeValidarParte = this.RespuestaValidarParte.meta.mensaje;\n        this.dialogo.open(DialogoConfirmacionComponent, {\n          data: this.MensajeValidarParte + `   ¿Desea Continuar ?`\n        }).afterClosed().subscribe(confirmado => {\n          if (confirmado) {\n            this.insert();\n            //alert(\"Procesando\")\n          } else {\n            // alert(\"Rechazado\")\n            // alert(\"Deberías probarlo, a mí me gusta :)\");\n          }\n        });\n      }\n    }, errorServicio => {\n      //this.util.showMessage( errorServicio.error.meta.mensaje);\n      this.insert();\n      this.MensajeValidarParte = \"\";\n    });\n    return this.MensajeValidarParte;\n  }\n  insert() {\n    if (this.isEnvioSolicitud == false) {\n      if (this.group.valid) {\n        const fd = new FormData();\n        const values = this.group.value;\n        //     this.v_validarparte = this.validarparte (parseInt(values[\"secuencia\"]),values[\"codigoOrdenTrabajo\"])\n        //if ( this.v_validarparte==true) {\n        this.isEnvioSolicitud = true;\n        if (parseInt(values[\"secuencia\"]) <= 0 || parseInt(values[\"secuencia\"]) > 99) {\n          this.util.showMessage(\"Secuencia no puede ser 0 o menor\");\n        } else {\n          fd.append(\"codigoCompania\", '02100000');\n          fd.append(\"codigoEmpleado\", this.codigoEmpleado.toString());\n          fd.append(\"codigoEstacion\", this.codigoEstacion);\n          fd.append(\"codigoOrdenTrabajo\", values[\"codigoOrdenTrabajo\"]);\n          fd.append(\"cantidadApoyo\", this.cantidadApoyo.toString());\n          fd.append(\"fechaHoraInicioOt\", this.miDatePipe.transform(new Date(), \"yyyy-MM-ddTHH:mm:ss\")); //\"2021-06-14T10:31:14.507\");\n          fd.append(\"fechaHoraTerminoOt\", null);\n          const parte = {};\n          parte.codigoCompañia = fd.get(\"codigoCompania\").toString();\n          parte.codigoEstacion = fd.get(\"codigoEstacion\").toString();\n          parte.codigoOrdenTrabajo = parseInt(fd.get(\"codigoOrdenTrabajo\").toString());\n          parte.cantidadApoyo = parseInt(fd.get(\"cantidadApoyo\").toString());\n          parte.fechaHoraTerminoOt = null;\n          parte.Turno = values[\"turno\"];\n          if (values[\"pasarsinstock\"] === null) {\n            parte.PasarStock = \"N\"; //values[\"pasarstock\"] //\"N\"\n          } else if (values[\"pasarsinstock\"] === true) {\n            parte.PasarStock = \"S\";\n          } else {\n            parte.PasarStock = \"N\";\n          }\n          if (values[\"reproceso\"] === null) {\n            parte.Reproceso = \"N\";\n          } else if (values[\"reproceso\"] === true) {\n            parte.Reproceso = \"S\";\n          } else {\n            parte.Reproceso = \"N\";\n          }\n          parte.CodigoMotivoParte = 0;\n          parte.CodigoMotivoRechazo1 = \"\";\n          parte.CantidadRechazada1 = 0;\n          parte.CodigoMotivoRechazo2 = \"\";\n          parte.CantidadRechazada2 = 0;\n          parte.CodigoMotivoRechazo3 = \"\";\n          parte.CantidadRechazada3 = 0;\n          parte.cantidad = 0;\n          parte.filas = 0;\n          parte.secuencia = parseInt(values[\"secuencia\"]);\n          parte.EstadoParte = \"A\";\n          parte.EstadoRegistro = true;\n          parte.Usuario = this.codigoEmpleado.toString(); //this.storage.get(\"codusuario\")\n          const fechahoraregistro = this.miDatePipe.transform(new Date(), \"yyyy-MM-ddTHH:mm:ss\");\n          parte.FlagTiempoPreparacion = values[\"tiempopreparacion\"];\n          parte.parteActividades = [];\n          if (this.Accion === \"nuevo\") {\n            parte.fechaHoraInicioOt = fd.get(\"fechaHoraInicioOt\").toString();\n            parte.NumeroParteProduccion = 0;\n            parte.Accion = \"I\";\n            if (this.listaEmpleado.length > 0) {\n              for (var x in this.listaEmpleado) {\n                const ActParte = {};\n                ActParte.CodigoParteActividad = 0;\n                ActParte.codigoEmpleado = this.listaEmpleado[x].codigoEmpleado;\n                ActParte.fechaHoraTerminoActividad = null;\n                if (values[\"tiempopreparacion\"] === true) {\n                  ActParte.fechaHoraInicioActividad = null;\n                } else {\n                  ActParte.fechaHoraInicioActividad = fechahoraregistro;\n                }\n                //parte.parteActividades = [];\n                parte.parteActividades.push(ActParte);\n              }\n            }\n            const ActParte = {};\n            ActParte.CodigoParteActividad = 0;\n            if (values[\"tiempopreparacion\"] === true) {\n              ActParte.fechaHoraInicioActividad = null;\n            } else {\n              ActParte.fechaHoraInicioActividad = this.miDatePipe.transform(new Date(), \"yyyy-MM-ddTHH:mm:ss\");\n            }\n            ActParte.codigoEmpleado = this.codigoEmpleado;\n            ActParte.fechaHoraTerminoActividad = null;\n            parte.parteActividades.push(ActParte);\n            //////////////////////////////////////////\n          } else {\n            parte.NumeroParteProduccion = this.numeroParteProduccion;\n            parte.Accion = 'U';\n            parte.CodigoParte = this.codigoParte;\n            parte.fechaHoraInicioOt = this.GfechaHoraInicioOt;\n          }\n          //if  (this.Accion ===\"nuevo\"){\n          this.aperturaService.insert(parte).subscribe(response => {\n            this.listInsertParterespuesta = response;\n            this.util.showMessage(this.listInsertParterespuesta.meta.mensaje);\n            this.isEnvioSolicitud = false;\n            if (this.listInsertParterespuesta.datos.status === 200) {\n              if (values[\"tiempopreparacion\"] === true) {\n                this.insertTiempoPreparacion(parte.Accion, response.datos.n_parteproduccion, response.datos.codigoParte);\n              }\n              // if (this.listInsertParterespuesta.meta.mensaje!=\"Parte existe\"){\n              this.listar(this.listInsertParterespuesta.datos.codigoParte);\n              this.limpiarControles();\n              this.listaEmpleado = [];\n              this.isEnvioSolicitud = false;\n              // }\n            }\n          }, errorServicio => {\n            this.util.showMessage(errorServicio.error.meta.mensaje);\n            this.isEnvioSolicitud = false;\n            //this.dataTable = [];\n          });\n        }\n        // }//fin de validar parte\n      }\n    } else {\n      alert('ya se envio una solicitud al servidor espere porfavor.');\n    }\n  }\n  limpiarControles() {\n    this.group.controls['codigoEmpleado'].setValue('');\n    this.codigoEmpleado = -1;\n    this.group.controls['codigoEstacion'].setValue('');\n    this.codigoEstacion = '';\n    this.group.controls['codigoOrdenTrabajo'].setValue('');\n    this.group.controls['turno'].setValue('1');\n    this.group.controls['secuencia'].setValue('');\n    this.group.controls['reproceso'].setValue(false);\n    this.group.controls['pasarsinstock'].setValue(false);\n    this.group.controls['tiempopreparacion'].setValue(false);\n    this.listaEmpleado = [];\n  }\n  insertTiempoPreparacion(tipotransaccion, numeroparteproduccion, CodigoParte) {\n    /*  const requestInsertTM : TiempoPreparacionEntity=<TiempoPreparacionEntity>{}\r\n      const value = this.group.value;\r\n      requestInsertTM.CodigoCompañia= \"02100000\"\r\n      requestInsertTM.CodigoEmpleado= this.codigoEmpleado\r\n      requestInsertTM.CodigoEstacion=this.codigoEstacion\r\n      requestInsertTM.NumeroParteProduccion = numeroparteproduccion\r\n      requestInsertTM.CodigoParte = CodigoParte\r\n      //requestInsertTM.CodigoMotivoTiempoMuerto =value[\"codigoMotivo\"]\r\n      if (value[\"codigoOrdenTrabajo\"] ===null){\r\n               requestInsertTM.CodigoOrdenTrabajo = 0\r\n              }else{\r\n         requestInsertTM.CodigoOrdenTrabajo = value[\"codigoOrdenTrabajo\"]\r\n      }\r\n     \r\n      requestInsertTM.Secuencia =  value[\"secuencia\"]\r\n              requestInsertTM.Usuario=this.codigoEmpleado.toString()//this.storage.get(\"codusuario\")\r\n      requestInsertTM.FechaHoraFinTiempoPreparacion= null\r\n      //requestInsertTM.CodigoMotivoTiempoPreparacion= 1\r\n      requestInsertTM.EstadoTiempoPreparacion= \"P\"\r\n     \r\n      requestInsertTM.EstadoRegistro=true\r\n              if (tipotransaccion===\"I\"){\r\n               requestInsertTM.Accion=\"I\"\r\n       requestInsertTM.FechaHoraInicioTiempoPreparacion = this.miDatePipe.transform(new Date(), \"yyyy-MM-ddTHH:mm:ss\")\r\n     \r\n      }else\r\n      {\r\n       requestInsertTM.Accion=\"U\"\r\n       //requestInsertTM.FechaHoraInicioTiempoPreparacion = this.GFechaHoraInicioTiempoPreparacion\r\n       //requestInsertTM.CodigoTiempoPreparacion=this.CodigoTiempoPreparacion\r\n              }\r\n       //this.TiempoPreperacionService.insert(requestInsertTM).subscribe(response =>\r\n       {\r\n         //this.listCMInsertrespuesta = response\r\n         //this.dataTable = this.listCMrespuesta.datos.result;\r\n         //this.util.showMessage( response.meta.mensaje);\r\n                 setTimeout(()=>{ // this will make the execution after the above boolean has changed\r\n          \r\n           },5000);\r\n                  \r\n          \r\n        // this.listar(1);\r\n       }, (errorServicio)=>{\r\n           this.util.showMessage( errorServicio.error.meta.mensaje);\r\n           this.dataTable = [];\r\n       });\r\n    */\n  }\n  delete() {\n    const response = this.util.confirm(\"Estas seguro de Eliminar\");\n    response.subscribe(response => console.log(\"response\", response));\n  }\n  edit() {\n    this.openModal({\n      name: 'Marcela'\n    });\n  }\n  nuevo() {\n    this.limpiarControles();\n    this.initializeForm();\n    this.listaApertura = [];\n    this.dataTable = this.listaApertura;\n    this.tituloboton = \"Guardar\";\n    this.Accion = \"nuevo\";\n    this.cantidadApoyo = 0;\n    this.isEnvioSolicitud = false;\n    setTimeout(() => {\n      this.searchElement.nativeElement.focus();\n    }, 0);\n    this.listaEmpleado = [];\n    this.habilitar = \"disabled\";\n  }\n  cargarDatos(row) {\n    this.group = new FormGroup({\n      codigoEmpleado: new FormControl(row.nombreEmpleado, Validators.required),\n      codigoEstacion: new FormControl(row.nombreEstacion, Validators.required),\n      codigoOrdenTrabajo: new FormControl(row.codigoOrdenTrabajo, Validators.required),\n      secuencia: new FormControl(row.secuencia, Validators.required),\n      turno: new FormControl(row.turno, Validators.required)\n    });\n    this.codigoEmpleado = row.codigoEmpleado;\n    this.codigoEstacion = row.codigoEstacion;\n    this.cantidadApoyo = row.cantidadApoyo;\n    this.codigoParte = row.codigoParte;\n    this.numeroParteProduccion = row.numeroParteProduccion;\n    this.GfechaHoraInicioOt = row.fechaHoraInicioOT;\n    this.Accion = \"editar\";\n    this.tituloboton = \"Editar\";\n    this.listaparteactividad = row.parteActividads[0]; // <ActividadEntity>{};\n    this.listaparteactividad.Cantidad = row.parteActividads[0].Cantidad;\n    this.listaparteactividad.Secuencia = row.parteActividads[0].Secuencia;\n    this.listaparteactividad.UsuarioCreacion = row.parteActividads[0].UsuarioCreacion;\n    this.listaparteactividad.FechaHoraTerminoActividad = null;\n    this.listaparteactividad.FechaHoraInicioActividad = row.parteActividads[0].FechaHoraInicioActividad;\n  }\n  exportar() {\n    this.OpenSheet();\n  }\n  GetEmpleado() {\n    return this.codigoEmpleado;\n  }\n  OpenSheet() {\n    this.util.openSheet();\n  }\n  initializeForm() {\n    this.group = new FormGroup({\n      codigoEmpleado: new FormControl(null, Validators.required),\n      // Validators.maxLength(10),\n      //Validators.pattern(/^[1-9]\\d{1,10}$/)]),\n      codigoEstacion: new FormControl(null, Validators.required),\n      codigoOrdenTrabajo: new FormControl(null, Validators.required),\n      turno: new FormControl(\"1\", Validators.required),\n      secuencia: new FormControl(null, Validators.required),\n      cantidadrechazado: new FormControl(null),\n      motivo: new FormControl(null),\n      reproceso: new FormControl(null),\n      pasarsinstock: new FormControl(null),\n      tiempopreparacion: new FormControl(false)\n    });\n  }\n  openModal(record = null) {\n    record = this.listaEmpleado;\n    //record = this.codigoEmpleado\n    //this.cantidadApoyo = 0;\n    const options = {\n      disableClose: true,\n      panelClass: 'container-form',\n      data: record\n    };\n    const reference = this.util.openModal(FormAperturaparteComponent, options);\n    reference.subscribe(response => {\n      if (response) {\n        this.cantidadApoyo = response.CantidadApoyo;\n        this.listaEmpleado = response.listaEmpleado;\n      }\n    });\n  }\n};\n__decorate([Input()], AperturaparteComponent.prototype, \"listParte\", void 0);\n__decorate([Input()], AperturaparteComponent.prototype, \"listParterespuesta\", void 0);\n__decorate([Input()], AperturaparteComponent.prototype, \"listInsertParterespuesta\", void 0);\n__decorate([Input()], AperturaparteComponent.prototype, \"RespuestaValidarParte\", void 0);\n__decorate([Input()], AperturaparteComponent.prototype, \"listEmpleadoResponse\", void 0);\n__decorate([Input()], AperturaparteComponent.prototype, \"listEstacionResponse\", void 0);\n__decorate([Input()], AperturaparteComponent.prototype, \"listParteAxtividad\", void 0);\n__decorate([Output()], AperturaparteComponent.prototype, \"outputParte\", void 0);\n__decorate([ViewChild('scanner')\n// scanner: ZXingScannerComponent;\n], AperturaparteComponent.prototype, \"hasCameras\", void 0);\n__decorate([ViewChild('searchElement')], AperturaparteComponent.prototype, \"searchElement\", void 0);\n__decorate([ViewChild(MatSelect)], AperturaparteComponent.prototype, \"turnos\", void 0);\n__decorate([ViewChild('estacion')], AperturaparteComponent.prototype, \"estacion\", void 0);\n__decorate([ViewChild('guardar')], AperturaparteComponent.prototype, \"guardar\", void 0);\n__decorate([ViewChild('ot')], AperturaparteComponent.prototype, \"ot\", void 0);\n__decorate([ViewChild('secuencia')], AperturaparteComponent.prototype, \"secuencia\", void 0);\nAperturaparteComponent = __decorate([Component({\n  selector: 'app-aperturaparte',\n  templateUrl: './aperturaparte.component.html',\n  styleUrls: ['./aperturaparte.component.css']\n})], AperturaparteComponent);\nexport { AperturaparteComponent };\nconst ELEMENT_DATA = [{\n  position: 1,\n  name: 'Hydrogen',\n  weight: 1.0079,\n  symbol: 'H'\n}, {\n  position: 2,\n  name: 'Helium',\n  weight: 4.0026,\n  symbol: 'He'\n}, {\n  position: 3,\n  name: 'Lithium',\n  weight: 6.941,\n  symbol: 'Li'\n}, {\n  position: 4,\n  name: 'Beryllium',\n  weight: 9.0122,\n  symbol: 'Be'\n}, {\n  position: 5,\n  name: 'Boron',\n  weight: 10.811,\n  symbol: 'B'\n}, {\n  position: 6,\n  name: 'Carbon',\n  weight: 12.0107,\n  symbol: 'C'\n}, {\n  position: 7,\n  name: 'Nitrogen',\n  weight: 14.0067,\n  symbol: 'N'\n}, {\n  position: 8,\n  name: 'Oxygen',\n  weight: 15.9994,\n  symbol: 'O'\n}, {\n  position: 9,\n  name: 'Fluorine',\n  weight: 18.9984,\n  symbol: 'F'\n}, {\n  position: 10,\n  name: 'Neon',\n  weight: 20.1797,\n  symbol: 'Ne'\n}];","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}