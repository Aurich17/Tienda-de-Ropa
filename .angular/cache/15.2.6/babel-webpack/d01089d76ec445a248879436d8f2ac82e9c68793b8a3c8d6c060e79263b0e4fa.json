{"ast":null,"code":"var FormAperturaparteComponent_1;\nimport { __decorate, __param } from \"tslib\";\nimport { Component, Inject, Input, VERSION, ViewChild, ViewEncapsulation } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { DialogoConfirmacionComponent } from 'src/app/shared/components/dialogoconfirmacion/dialogoconfirmacion.component';\nlet FormAperturaparteComponent = FormAperturaparteComponent_1 = class FormAperturaparteComponent {\n  constructor(reference, data,\n  //private barcodeScanner: BarcodeScanner,\n  router, dialogo, util, notifier, aperturaService) {\n    this.reference = reference;\n    this.data = data;\n    this.router = router;\n    this.dialogo = dialogo;\n    this.util = util;\n    this.notifier = notifier;\n    this.aperturaService = aperturaService;\n    this.qrData = null;\n    this.scannedCode = null;\n    this.ngVersion = VERSION.full;\n    this.hasCameras = false;\n    this.statusButton = \"false\";\n    this.listaApertura = [];\n    this.listKeyPadButtons = [{\n      icon: 'description',\n      color: 'warn',\n      action: 'nuevo',\n      tooltip: 'Crear Nuevo Registro',\n      texto: \"Nuevo\",\n      estado: \"false\"\n    }, {\n      icon: 'add',\n      color: 'warn',\n      action: 'insert',\n      tooltip: 'Agregar Datos',\n      texto: \"Agregar\",\n      estado: \"group.invalid\"\n    }, {\n      icon: 'sensor_door',\n      color: 'warn',\n      action: 'salir',\n      tooltip: 'Salir De la Pantalla',\n      texto: \"Salir\",\n      estado: \"false\"\n    }];\n    this.metadataTable = [{\n      field: \"codigoEmpleado\",\n      title: \"CodigoEmpleado\"\n    }, {\n      field: \"NombreEmpleado\",\n      title: \"Nombre Completo\"\n    }];\n    this.displayedColumns = ['position', 'name', 'weight', 'symbol'];\n    this.dataSource = ELEMENT_DATA;\n  }\n  /*validarcodigoempleado(dato : string):boolean{\r\n     \r\n    var myArr = [\"5\",\"6\",\"12\",\"13\",\"17\",\"23\",\"24\",\"29\",\"31\",\"32\",\"33\",\"35\",\"49\",\"54\",\"55\",\"64\"\r\n    ,\"67\",\"68\",\"76\",\"82\",\"86\",\"89\",\"91\",\"176\",\"257\",\"299\",\"303\",\"305\",\"384\",\"5174\",\"5192\"]\r\n    const resultado =  myArr.includes( dato )\r\n    return resultado\r\n  }\r\n  */\n  /*\r\n  cambiarfocusautomatico(){\r\n    \r\n    const pasarsize =  this.validarcodigoempleado(this.group.controls['codigoEmpleado'].value)\r\n    if  ((this.group.controls['codigoEmpleado'].value.length>4) || (pasarsize===true)){\r\n    \r\n     // this.listarEmpleado(\"\")\r\n      \r\n  }\r\n  \r\n  }\r\n  */\n  ngAfterViewChecked() {\n    //if (this.setFocus && this.cantidad && this.cantidad.nativeElement) {\n    // this.nativeElement.focus(); // can do this because I check if there is a nativeElement above\n    // this.setFocus = false;\n    this.empleado.nativeElement.focus();\n    // }\n  }\n\n  handleKeyDown(event) {\n    if (event.keyCode == 13) {\n      if (parseInt(this.group.controls['codigoEmpleado'].value) === this.data) {\n        this.util.showMessage(\"Empleado ya esta registrado como principal\");\n      } else if (this.arrayempleado.includes(parseInt(this.group.controls['codigoEmpleado'].value)) === false) {\n        //this.listarEmpleado(\"\")\n      } else {\n        this.util.showMessage(\"Empleado ya esta agregado\");\n      }\n    } else if (event.keyCode == 40) {\n      // action\n    } else if (event.keyCode == 38) {\n      // action\n    }\n  }\n  ngOnChanges(changes) {\n    console.log(changes);\n  }\n  ngOnInit() {\n    this.initializeForm();\n    this.path = \"/gestionpartes\";\n    this.cantidadApoyo = 0;\n    this.codigoEmpleado = 0;\n    this.listaEmpleado = [];\n    this.arrayempleado = [];\n    setTimeout(() => {\n      this.empleado.nativeElement.focus();\n    }, 0);\n    // alert(this.apertura.GetEmpleado())\n    this.listaEmpleado = this.data;\n    this.dataTable = this.listaEmpleado;\n    let index;\n    index = 0;\n    for (let clave of this.listaEmpleado) {\n      this.arrayempleado.push(this.listaEmpleado[index].codigoEmpleado);\n      index++;\n    }\n  }\n  execute(action) {\n    if (action == \"insert\") {\n      console.log(action);\n      this.insert();\n    } else {\n      console.log(action);\n      this.exportar();\n    }\n  }\n  Salir(path) {\n    const datacantapoyo = {\n      CantidadApoyo: this.listaEmpleado ? this.listaEmpleado.length : 0,\n      listaEmpleado: this.listaEmpleado ? this.listaEmpleado : []\n    };\n    this.reference.close(datacantapoyo);\n    this.listaEmpleado = [];\n    this.arrayempleado = [];\n  }\n  aceptar() {\n    const datacantapoyo = {\n      CantidadApoyo: this.listaEmpleado ? this.listaEmpleado.length : 0,\n      listaEmpleado: this.listaEmpleado\n    };\n    this.reference.close(datacantapoyo);\n    this.listaEmpleado = [];\n    this.arrayempleado = [];\n  }\n  listarEstacion(codigoEstacion) {\n    /*const RequestEstacion: AperturaParteEstacion = <AperturaParteEstacion>{}; ;\r\n    const values = this.group.value\r\n    \n    RequestEstacion.CodigoEstacion=  values[\"codigoEstacion\"];\r\n    if (this.group.controls['codigoEstacion'].valid){\r\n        this.aperturaService.listarestacion(RequestEstacion).subscribe\r\n        ((response) =>{\r\n              \r\n            this.listEstacionResponse = response\r\n            this.codigoEstacion= this.listEstacionResponse.datos.result[0].codigoEstacion;\r\n            this.group.controls['codigoEstacion'].setValue(this.listEstacionResponse.datos.result[0].codigoEstacion && ' - ' && this.listEstacionResponse.datos.result[0].descripcion );\r\n            if (this.listEstacionResponse.datos.status!=200){\r\n              this.util.showMessage(this.listEstacionResponse.meta.mensaje)\r\n              }\r\n          \r\n            }, (errorServicio)=>{\r\n              this.util.showMessage( errorServicio.error.meta.mensaje);\r\n              this.group.controls['codigoEstacion'].setValue(\"\");\r\n            \r\n      });\r\n    \n    \n    }\r\n    */\n  }\n  //parteresponse : ParteResponse;\n  listar(codigoparte) {\n    /* if (this.group.valid){\r\n     \r\n      const fd= new FormData();\r\n      const values = this.group.value\r\n      const parte: RequestParte =  this.group.value;\r\n      parte.CodigoParte = codigoparte;\r\n      this.aperturaService.listar(parte).subscribe(response =>\r\n      {\r\n        this.listParterespuesta = response\r\n        this.dataTable = this.listParterespuesta.datos.result;\r\n      })\r\n    \n     }*/\n  }\n  insert() {\n    /* if (this.group.valid){\r\n      \r\n        const fd= new FormData();\r\n        const values = this.group.value\r\n     \r\n        fd.append(\"codigoCompania\",'02100000');\r\n        fd.append(\"codigoEmpleado\",this.codigoEmpleado.toString());\r\n        fd.append(\"codigoEstacion\",this.codigoEstacion);\r\n        fd.append (\"codigoOrdenTrabajo\" , values[\"codigoOrdenTrabajo\"]);\r\n        fd.append(\"cantidadApoyo\",this.cantidadApoyo.toString());\r\n        fd.append(\"fechaHoraInicioOt\",this.miDatePipe.transform(new Date(), \"yyyy-MM-ddThh:mm:ss\"));//\"2021-06-14T10:31:14.507\");\r\n        fd.append(\"fechaHoraInicioActividad\",this.miDatePipe.transform(new Date(), \"yyyy-MM-ddThh:mm:ss\"));\r\n        fd.append(\"fechaHoraTerminoActividad\",null);\r\n        fd.append(\"fechaHoraTerminoOt\",null);\r\n        \r\n               const parte: ParteEntity = this.group.value;\r\n       \r\n        parte.codigoCompañia = fd.get(\"codigoCompania\").toString() ;\r\n        parte.codigoEmpleado = parseInt(fd.get(\"codigoEmpleado\").toString()) ;\r\n        parte.codigoEstacion= fd.get(\"codigoEstacion\").toString() ;\r\n        parte.codigoOrdenTrabajo = parseInt(fd.get(\"codigoOrdenTrabajo\").toString()) ;\r\n        parte.cantidadApoyo= parseInt(fd.get(\"cantidadApoyo\").toString()) ;\r\n        parte.fechaHoraInicioOt= fd.get(\"fechaHoraInicioOt\").toString() ;\r\n        parte.fechaHoraInicioActividad = fd.get(\"fechaHoraInicioActividad\").toString() ;;\r\n        parte.fechaHoraTerminoOt = null ;\r\n        parte.fechaHoraTerminoActividad= null;\r\n       \r\n     this.aperturaService.insert(parte).subscribe((response) =>{\r\n     this.listInsertParterespuesta = response\r\n     this.util.showMessage(this.listInsertParterespuesta.meta.mensaje);\r\n     this.listar(this.listInsertParterespuesta.datos.result.codigoParte)\r\n            });\r\n             }\r\n        */\n  }\n  delete(row) {\n    //const response: Observable<any> = this.util.confirm(\"Estas seguro de Eliminar\");\n    this.dialogo.open(DialogoConfirmacionComponent, {\n      data: `¿Desea Eliminar Empleado?`\n    }).afterClosed().subscribe(confirmado => {\n      if (confirmado) {\n        this.removeItem(row);\n        this.dataTable = this.listaEmpleado;\n        this.removeItemFromArr(this.arrayempleado, row.codigoEmpleado);\n      } else {\n        // alert(\"Deberías probarlo, a mí me gusta :)\");\n      }\n    });\n    //response.subscribe((response)=> console.log(\"response\",response));\n    //this.removeItemFromArr( this.listaEmpleado, row.codigoEmpleado );\n  }\n\n  removeItemFromArr(arr, item) {\n    var i = arr.indexOf(item);\n    if (i !== -1) {\n      arr.splice(i, 1);\n    }\n  }\n  removeItem(obj) {\n    this.listaEmpleado = this.listaEmpleado.filter(item => item !== obj);\n  }\n  edit() {\n    this.openModal({\n      name: 'Marcela'\n    });\n  }\n  nuevo() {\n    this.initializeForm();\n    this.listaApertura = [];\n    this.dataTable = this.listaApertura;\n    this.listaEmpleado = [];\n  }\n  cargarDatos() {\n    this.group = new FormGroup({\n      codigoEmpleado: new FormControl(this.listaApertura[0].codigoEmpleado, Validators.required)\n    });\n  }\n  exportar() {\n    this.OpenSheet();\n  }\n  OpenSheet() {\n    this.util.openSheet();\n  }\n  initializeForm() {\n    this.group = new FormGroup({\n      codigoEmpleado: new FormControl(null, Validators.required),\n      // Validators.maxLength(10),\n      //Validators.pattern(/^[1-9]\\d{1,10}$/)]),\n      codigoEstacion: new FormControl(null, Validators.required),\n      codigoOrdenTrabajo: new FormControl(null, Validators.required)\n    });\n  }\n  openModal(record = null) {\n    const options = {\n      disableClose: true,\n      panelClass: 'container-form',\n      data: record\n    };\n    const reference = this.util.openModal(FormAperturaparteComponent_1, options);\n    reference.subscribe(response => {\n      if (response) {\n        this.util.showMessage(\"Datos guardados\");\n      }\n    });\n  }\n  /*scanCode () {\r\n   \r\n        //alert(\"camara\");\r\n    this.scanner.camerasFound.subscribe((devices: MediaDeviceInfo[]) => {\r\n      // selects the devices's back camera by default\r\n      alert(devices);\r\n      for (const device of devices) {\r\n          if (device.deviceId === \"03b7ab59427c8f29a5b9aba24b66417872c77ec38481f9ce20ab8eff655a80be\") {\r\n            this.hasCameras = true;\r\n            console.log('Devices: ', devices);\r\n            this.availableDevices = devices;\r\n            return device;\r\n          }\r\n          console.log('Devices: ', devices);\r\n      }\r\n      console.log('Devices: ', devices);\r\n    });\r\n      \r\n      this.scanner.camerasFound.subscribe((devices: MediaDeviceInfo[]) => {\r\n      this.hasCameras = true;\r\n          console.log('Devices: ', devices);\r\n      this.availableDevices = devices;\r\n      });\r\n  \r\n      this.scanner.camerasNotFound.subscribe((devices: MediaDeviceInfo[]) => {\r\n      console.error('An error has occurred when trying to enumerate your video-stream-enabled devices.');\r\n  });\r\n      this.scanner.permissionResponse.subscribe((answer: boolean) => {\r\n    this.hasPermission = answer;\r\n  });\r\n      }\r\n  */\n  handleQrCodeResult(resultString) {\n    console.log('Result: ', resultString);\n    this.qrResultString = resultString;\n  }\n  onDeviceSelectChange(selectedValue) {\n    console.log('Selection changed: ', selectedValue);\n    // this.selectedDevice = this.scanner.getDeviceById(selectedValue);\n  }\n};\n\n__decorate([Input()], FormAperturaparteComponent.prototype, \"codigoEmpleadoPadre\", void 0);\n__decorate([ViewChild('scanner')], FormAperturaparteComponent.prototype, \"hasCameras\", void 0);\n__decorate([ViewChild('empleado')], FormAperturaparteComponent.prototype, \"empleado\", void 0);\nFormAperturaparteComponent = FormAperturaparteComponent_1 = __decorate([Component({\n  selector: 'app-form-aperturaparte',\n  templateUrl: './form-aperturaparte.component.html',\n  styleUrls: ['./form-aperturaparte.component.css'],\n  encapsulation: ViewEncapsulation.None //Significa   que los estilo que uno defina solo afecte a ese componente\n}), __param(1, Inject(MAT_DIALOG_DATA))], FormAperturaparteComponent);\nexport { FormAperturaparteComponent };\nconst ELEMENT_DATA = [{\n  position: 1,\n  name: 'Hydrogen',\n  weight: 1.0079,\n  symbol: 'H'\n}, {\n  position: 2,\n  name: 'Helium',\n  weight: 4.0026,\n  symbol: 'He'\n}, {\n  position: 3,\n  name: 'Lithium',\n  weight: 6.941,\n  symbol: 'Li'\n}, {\n  position: 4,\n  name: 'Beryllium',\n  weight: 9.0122,\n  symbol: 'Be'\n}, {\n  position: 5,\n  name: 'Boron',\n  weight: 10.811,\n  symbol: 'B'\n}, {\n  position: 6,\n  name: 'Carbon',\n  weight: 12.0107,\n  symbol: 'C'\n}, {\n  position: 7,\n  name: 'Nitrogen',\n  weight: 14.0067,\n  symbol: 'N'\n}, {\n  position: 8,\n  name: 'Oxygen',\n  weight: 15.9994,\n  symbol: 'O'\n}, {\n  position: 9,\n  name: 'Fluorine',\n  weight: 18.9984,\n  symbol: 'F'\n}, {\n  position: 10,\n  name: 'Neon',\n  weight: 20.1797,\n  symbol: 'Ne'\n}];","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}